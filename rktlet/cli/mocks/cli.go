/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Mockery for CLI. This code should not be edited by hand
package mocks

import "github.com/kubernetes-incubator/rktlet/rktlet/cli"
import "github.com/stretchr/testify/mock"

// CLI is an autogenerated mock type for the CLI type
type CLI struct {
	mock.Mock
}

// Command provides a mock function with given fields: _a0, _a1
func (_m *CLI) Command(_a0 string, _a1 ...string) []string {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...string) []string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RunCommand provides a mock function with given fields: _a0, _a1
func (_m *CLI) RunCommand(_a0 string, _a1 ...string) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...string) []string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// With provides a mock function with given fields: _a0
func (_m *CLI) With(_a0 cli.CLIConfig) cli.CLI {
	ret := _m.Called(_a0)

	var r0 cli.CLI
	if rf, ok := ret.Get(0).(func(cli.CLIConfig) cli.CLI); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cli.CLI)
		}
	}

	return r0
}
